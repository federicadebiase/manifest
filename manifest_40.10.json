import csv
import json

# Percorso del file CSV contenente le annotazioni
csv_file_path = 'C:/Users/Feder/Downloads/pluteo 40.10.v3i.tensorflow/train/_annotations.csv'

# Percorso del file manifest
manifest_file_path = 'C:/Users/Feder/Downloads/pluteo 40.10.v3i.tensorflow/train/manifest_40.10.json'

# Creiamo un dizionario per memorizzare i dati del manifest
manifest = {
    "@context": "http://iiif.io/api/presentation/3/context.json",
    "id": "https://raw.githubusercontent.com/federicadebiase/manifest/main/train/manifest_40.10.json",
    "type": "Manifest",
    "label": {
        "en": ["Pluteo 40.10 - Manoscritto medievale"]
    },
    "items": []
}

# Aggiungiamo le immagini come "canvases"
with open(csv_file_path, mode='r') as file:
    reader = csv.reader(file)
    
    # Salta la prima riga se è l'intestazione
    next(reader)
    
    # Aggiungi un canvas per ogni immagine nel file CSV
    for row in reader:
        if not row or len(row) < 8:
            continue  # salta righe vuote o incomplete
        
        # Assicurati che i valori numerici siano corretti
        try:
            filename, width, height, label, xmin, ymin, xmax, ymax = row
            width = int(width)
            height = int(height)
            xmin = int(xmin)
            ymin = int(ymin)
            xmax = int(xmax)
            ymax = int(ymax)
        except ValueError as e:
            print(f"Errore nei dati CSV per la riga: {row}. Errore: {e}")
            continue  # Salta la riga se c'è un errore nei dati

        # Creiamo un canvas per ogni immagine
        canvas = {
            "id": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}",
            "type": "Canvas",
            "width": width,
            "height": height,
            "label": {
                "en": [f"Pagina {filename}"]
            },
            "items": []
        }
        
        # Creiamo le annotazioni per ogni canvas
        annotation_page = {
            "id": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}/annotation_page",
            "type": "AnnotationPage",
            "items": []
        }

        # Creiamo l'annotazione di tipo "painting"
        annotation = {
            "id": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}/annotation_page/painting",
            "type": "Annotation",
            "motivation": "painting",
            "body": {
                "id": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/{filename}",
                "type": "Image",
                "format": "image/jpeg",
                "height": height,
                "width": width
            },
            "target": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}"
        }

        # Aggiungi l'annotazione alla page
        annotation_page["items"].append(annotation)

        # Creiamo l'annotazione di tipo "commenting"
        annotation_comment = {
            "id": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}/annotation_page/anno_0",
            "type": "Annotation",
            "motivation": "commenting",
            "body": {
                "type": "TextualBody",
                "value": label,  # Aggiungi l'etichetta dal CSV
                "format": "text/plain",
                "language": "en"
            },
            "target": f"https://raw.githubusercontent.com/federicadebiase/manifest/main/train/canvas/{filename}"
        }

        # Aggiungi la seconda annotazione
        annotation_page["items"].append(annotation_comment)

        # Aggiungi la annotation page al canvas
        canvas["items"].append(annotation_page)

        # Aggiungi il canvas al manifest
        manifest["items"].append(canvas)

# Salva il manifest in un file JSON
with open(manifest_file_path, 'w') as json_file:
    json.dump(manifest, json_file, indent=4)

print(f"Manifest creato con successo! Puoi trovarlo su: {manifest_file_path}")
